#!/bin/sh

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -o errexit
set -o nounset
set -o pipefail
set -x

CHILD_PROCESS="UNKNOWN"

# exit code map
# FRAMEWORK_BARRIER: 200 -> 250 FrameworkBarrierTransientFailed
#                    201 -> 251 JobGangAllocationTimeout
#                    210 -> 252 FrameworkBarrierPermanentFailed
# PORT_CONFLICT_CHECKER: 10 -> 253 ContainerPortConflict
# PAIRuntimeInitContainerUnkownError: 248
function exit_handler()
{
  EXIT_CODE=$?
  if [[ $EXIT_CODE -eq 0 ]]; then
    exit 0
  fi

  echo "start execute exit handler"
  echo "child process is ${CHILD_PROCESS}, exit code is ${EXIT_CODE}"
  if [[ $CHILD_PROCESS = "FRAMEWORK_BARRIER" ]]; then
    if [[ $EXIT_CODE -eq 200 ]]; then
      exit 250
    fi

    if [[ $EXIT_CODE -eq 201 ]]; then
      exit 251
    fi

    if [[ $EXIT_CODE -eq 210 ]]; then
      exit 252
    fi
  fi

  if [[ $CHILD_PROCESS = "PORT_CONFLICT_CHECKER" ]]; then
    if [[ $EXIT_CODE -eq 10 ]]; then
      exit 253
    fi
  fi

  if [[ $CHILD_PROCESS = "DOCKER_IMAGE_CHECKER" ]]; then
    exit 254
  fi

  # signal triggered, do not change exit code
  case $EXIT_CODE in
    130|131|132|134|135|136|137|139|141|143)
      exit $EXIT_CODE
      ;;
    *)
      echo "Unknown exit code, platform error"
      exit 1
      ;;
  esac
}

trap exit_handler EXIT

# This init script will be executed inside init container,
# all scripts under init.d will be executed in priority order.
# Init scripts will do preparations before user container starts.
# Runtime script will be executed as the entrypoint of user container
# and will be pid 1 process in user container.

PAI_WORK_DIR=/usr/local/pai
PAI_CONFIG_DIR=/usr/local/pai-config
PAI_INIT_DIR=${PAI_WORK_DIR}/init.d
PAI_RUNTIME_DIR=${PAI_WORK_DIR}/runtime.d

PAI_LOG_DIR=${PAI_WORK_DIR}/logs/${FC_POD_UID}
PAI_SECRET_DIR=${PAI_WORK_DIR}/secrets
PAI_TOKEN_SECRET_DIR=${PAI_WORK_DIR}/token-secrets

chmod a+rw $PAI_LOG_DIR

# Move previous logs to another folder. Notice: exclude for init.log, new log will append to previous log file
LOG_FILES=$(find $PAI_LOG_DIR -maxdepth 1 -type f ! -name "init.log")
if [[ ! -z "$LOG_FILES" ]]; then
  echo "[WARN] $PAI_LOG_DIR not empty, contains previous results"
  PRE_LOG_DIR=$PAI_LOG_DIR/prelog_$RANDOM
  while [[ -d $PRE_LOG_DIR ]]
  do
    PRE_LOG_DIR=$PAI_LOG_DIR/prelog_$RANDOM
  done
  mkdir $PRE_LOG_DIR
  mv $LOG_FILES $PRE_LOG_DIR
fi

# Clean ${PAI_WORK_DIR} since it may contain last execution content. (rarely happen, but seen in real world)
find ${PAI_WORK_DIR} -maxdepth 1 -mindepth 1 ! -name "logs" -exec rm -rf {} \;


# Move all runtime sources to PAI_WORK_DIR
mv ./* ${PAI_WORK_DIR}
cd ${PAI_WORK_DIR}

# To run init scripts under init.d in init container,
# execute them here in priority order.s
# Here're the steps to onboard a new init script,
# 1. put it under init.d
# 2. give it a priority in [0, 100] and insert below in order
# 3. add the following format block

# comment for the script purpose
# priority=value
# CHILD_PROCESS="NAME_FOR_THE_INITIALIZER"
# ${PAI_INIT_DIR}/init.sh

if [[ $GANG_ALLOCATION = "true" ]]; then
  # framework barrier
  # priority=0
  CHILD_PROCESS="FRAMEWORK_BARRIER"
  echo "frameworkbarrier start"
  if [[ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]]; then
    unset KUBE_APISERVER_ADDRESS
  fi
  ${PAI_INIT_DIR}/frameworkbarrier 2>&1 | tee ${PAI_LOG_DIR}/barrier.log
else
  # Get framework
  # priority=0
  # We should use k8s client to communicate api server, need to change this when RBAC is enabled
  CHILD_PROCESS="FRAMEWORK_RETRIEVER"
  if [[ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]]; then
    set -- -k -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  fi
  curl -s "$@" \
    $KUBE_APISERVER_ADDRESS/apis/frameworkcontroller.microsoft.com/v1/namespaces/default/frameworks/$FC_FRAMEWORK_NAME > framework.json
fi

# error spec
# priority=1
CHILD_PROCESS="ERROR_SPEC"
cp ${PAI_CONFIG_DIR}/runtime-exit-spec.yaml ${PAI_RUNTIME_DIR}

# generate runtime env variables
# priority=10
CHILD_PROCESS="ENV_GENERATOR"
python ${PAI_INIT_DIR}/framework_parser.py genenv framework.json > ${PAI_RUNTIME_DIR}/runtime_env.sh

# generate jobconfig
# priority=11
CHILD_PROCESS="CONFIG_GENERATOR"
python ${PAI_INIT_DIR}/framework_parser.py genconf framework.json > ${PAI_RUNTIME_DIR}/job_config.yaml

# Init plugins
# priority=12
CHILD_PROCESS="PLUGIN_INITIALIZER"
python ${PAI_INIT_DIR}/initializer.py ${PAI_RUNTIME_DIR}/job_config.yaml ${PAI_SECRET_DIR}/secrets.yaml ${PAI_TOKEN_SECRET_DIR}/token ${PAI_WORK_DIR}/plugins ${PAI_RUNTIME_DIR} ${FC_TASKROLE_NAME}

# Init plugins
# check port conflict
CHILD_PROCESS="PORT_CONFLICT_CHECKER"
python ${PAI_INIT_DIR}/port.py ${PAI_RUNTIME_DIR}/runtime_env.sh

# check if docker image exists
CHILD_PROCESS="DOCKER_IMAGE_CHECKER"
python ${PAI_INIT_DIR}/image_checker.py ${PAI_RUNTIME_DIR}/job_config.yaml ${PAI_SECRET_DIR}/secrets.yaml

# write user commands to user.sh
# priority=100
CHILD_PROCESS="RENDER_USER_COMMAND"
python ${PAI_INIT_DIR}/user_command_renderer.py ${PAI_SECRET_DIR}/secrets.yaml ${PAI_RUNTIME_DIR}/user.sh

# for debug
echo -e "\nruntime_env.sh has:"
cat ${PAI_RUNTIME_DIR}/runtime_env.sh
